=pod

=encoding utf8

=head1 NAME

Muldis::D::Package::Muldis_D -
Muldis D core data types and operators

=head1 VERSION

This document is Muldis::D::Package::Muldis_D version 0.200.1.

=head1 PREFACE

This document is part of the Muldis D language specification, whose root
document is L<Muldis::D>; you should read that root document
before you read this one, which provides subservient details.

=head1 SYNOPSIS

    Muldis_D:Plain_Text:"http://muldis.com":"0.200.1";
    script ASCII;
    package
    {
        identity My_App ::= My_App:"http://mycorp.com":"0";
        uses
        {
            MD ::= Muldis_D:"http://muldis.com":"0.200.1";
        };
        materials
        {
            floating {::My_App, ::MD};

            `TODO: Put example routines etc here.`

        };
    };

=head1 DESCRIPTION

This document defines the Muldis D Plain Text package
C<Muldis_D:"http://muldis.com":"0.200.1"> which provides the common core
system-defined data types and operators that regular users of the language
would employ directly in their applications and schemas.

This document I<also> defines the Muldis D Plain Text package
C<Muldis_D::Synonyms:"http://muldis.com":"0.200.1"> which adds trans-ASCII
Unicode synonyms to C<Muldis_D> package entities.

=head1 PACKAGES

From one source:

    Muldis_D:Plain_Text:"http://muldis.com":"0.200.1";
    script ASCII;
    package
    {
        identity MD ::= Muldis_D:"http://muldis.com":"0.200.1";
        materials
        {
            floating {::MD};
            ...
        };
    };

From a separate source:

    Muldis_D:Plain_Text:"http://muldis.com":"0.200.1";
    script Unicode:6.2.0:UTF-8:canon;
    package
    {
        identity MDS ::= Muldis_D::Synonyms:"http://muldis.com":"0.200.1";
        uses
        {
            MD ::= Muldis_D:"http://muldis.com":"0.200.1";
        };
        materials
        {
            floating {::MD, ::MDS};
            ...
        };
    };

=head1 MAXIMAL AND MINIMAL DATA TYPES

=head2 Anything

    ::MD::Anything ::= type default false;

    ::MD::Any ::= synonym of Anything;

The enumeration contract C<Anything> represents the infinite I<universal
type>, which is the maximal data type of the entire Muldis D type system
and consists of all values which can possibly exist.  It also represents
the infinite Muldis D Foundation type I<FDN__Anything>.  Its default value
is C<false>.  Other programming languages may name their corresponding
types I<Any> or I<Object> or I<Anything>.

=head2 Nothing

    ::MD::Nothing ::= type of {};

The enumeration contract C<Nothing> represents the finite I<empty type>,
which is the minimal data type of the entire Muldis D type system and
consists of exactly zero values.  It can not have any default value.

=head2 =

    ::MD::"=" ::= function --> Boolean <-- (Anything, Anything)
        is {commutative}
        : topic -->^ FDN__same;

    ::MD::same ::= synonym of "=";

The function C<=> results in C<true> iff its 2 conceptual arguments are
exactly the same value, and C<false> otherwise.  Other programming
languages may name their corresponding operators I<==> or I<===>.

=head2 !=

    ::MD::"!=" ::= function --> Boolean <-- (Anything, Anything)
        is {commutative}
        : topic --> "=" ?? false !! true;

    ::MD::not_same ::= synonym of "!=";
    ::MDS::"≠"     ::= synonym of "!=";

The function C<!=> results in C<false> iff its 2 conceptual arguments are
exactly the same value, and C<true> otherwise.

=head1 ORDERABLE DATA TYPES

=head2 Orderable

    ::MD::Orderable ::= type abstract
        requires_implements in_order;

I<TODO.>

=head1 ENUMERABLE DATA TYPES

=head2 Enumerable

    ::MD::Enumerable ::= type abstract
        composes Orderable and_provides_its_default
        requires_implements {in_order,pred,succ};

I<TODO.>

=head1 BOOLABLE DATA TYPES

=head2 Boolable

    ::MD::Boolable ::= type abstract requires_implements "?";

I<TODO.>

=head2 ?

    ::MD::"?"::"" ::= function virtual --> Boolean <-- (Boolable);

    ::MD::so ::= synonym of "?";

I<TODO.>

=head1 BOOLEAN DATA TYPES

=head2 Boolean

    ::MD::Boolean::"" ::= type where topic -->^ FDN__isa_Boolean
        default false
        composes {Enumerable and_provides_its_default,
            Boolable and_provides_its_default};

    ::MD::Bool ::= synonym of Boolean;

The enumeration contract C<Boolean> represents the finite Muldis D
Foundation type I<FDN__Boolean>.  A C<Boolean> value is a general purpose
2-valued logic boolean, or specifically it is one of the 2 values C<false>
and C<true>.  Its default value is C<false>.

I<TODO.>

Examples:

    true

    false

=head2 ?

    ::MD::"?"::Boolean ::= function --> Boolean <-- (Boolean)
        implements 1::""
        : \\0;

I<TODO.>

=head2 not

    ::MD::not ::= function --> Boolean <-- (Boolean)
        : \\0 ?? false !! true;

    ::MD::"!"  ::= synonym of not;
    ::MDS::"¬" ::= synonym of not;

I<TODO.>

=head2 and

    ::MD::and ::= function --> Boolean <-- (Boolean, Boolean)
        is {commutative,associative,idempotent} identity true
        : (\\0 ?? \\1 !! false);

    ::MD::all   ::= synonym of and;
    ::MD::every ::= synonym of and;
    ::MDS::"∧"  ::= synonym of and;

I<TODO.>

=head1 NUMERIC DATA TYPES

=head2 Numeric

    ::MD::Numeric ::= type abstract
        requires_implements {"-"::monadic,"+","-","*","/","div"};

I<TODO.>

=head1 INTEGRAL DATA TYPES

=head2 Integral

    ::MD::Integral ::= type abstract
        composes {Enumerable, Boolable, Numeric and_provides_its_default}
        requires_implements {...,is_zero,...};

I<TODO.>

=head2 ?

    ::MD::"?"::Integral ::= function --> Boolean <-- (Integral)
        implements 1::""
        : \\0->is_zero->not;

I<TODO.>

=head2 is_zero

    ::MD::is_zero::"" ::= function virtual --> Boolean <-- (Integral);

I<TODO.>

=head1 INTEGER DATA TYPES

=head2 Inf_Integer

    ::MD::Inf_Integer ::= type where topic -->^ FDN__isa_Inf_Integer
        default 0 
        composes Integral and_provides_its_default;

    ::MD::Integer ::= synonym of Inf_Integer;
    ::MD::Int     ::= synonym of Inf_Integer;

The enumeration contract C<Inf_Integer> represents the infinite Muldis D
Foundation type I<FDN__Inf_Integer>.  An C<Inf_Integer> value is a general
purpose integer exact numeric.  Its default value is C<0>.  Other
programming languages may name their corresponding types I<BigInt>.

I<TODO.>

Examples:

    42

    0

    \-3

    \+'-3' '50_897'

    0d39

    0xDEADBEEF

    0o644

    0b11001001

=head2 is_zero

    ::MD::is_zero::Inf_Integer ::= function --> Boolean <-- (Inf_Integer)
        implements 1::""
        : \\0 = 0;

I<TODO.>

=head1 SEE ALSO

Go to L<Muldis::D> for the majority of distribution-internal
references, and L<Muldis::D::See_Also> for the majority of
distribution-external references.

=head1 AUTHOR

Darren Duncan (C<darren@DarrenDuncan.net>)

=head1 LICENSE AND COPYRIGHT

This file is part of the formal specification of the Muldis D language.

Muldis D is Copyright © 2002-2015, Muldis Data Systems, Inc.

See the LICENSE AND COPYRIGHT of L<Muldis::D> for details.

=head1 TRADEMARK POLICY

The TRADEMARK POLICY in L<Muldis::D> applies to this file too.

=head1 ACKNOWLEDGEMENTS

The ACKNOWLEDGEMENTS in L<Muldis::D> apply to this file too.

=cut
