=pod

=encoding utf8

=head1 NAME

Muldis::D::Foundation -
Fundamental low-level data types and operators of Muldis D

=head1 VERSION

This document is Muldis::D::Foundation version 0.200.1.

=head1 PREFACE

This document is part of the Muldis D language specification, whose root
document is L<Muldis::D>; you should read that root document
before you read this one, which provides subservient details.

=head1 DESCRIPTION

This document defines the fundamental data types and operators of Muldis D,
collectively referred to as the I<Muldis D Foundation>; these are the
mandatory minimal core set of system-defined and eternally available
entities that all Muldis D implementations, at least those that claim to
support the C<Muldis_D:Plain_Text:"http://muldis.com":"0.200.1"> language,
need to provide.

The official Muldis D Plain Text language is canonically stratified into 2
main layers implementation-wise, I<low-level> and I<high-level>.

High-level Muldis D provides the system-defined types and operators and
other features that regular users of the language would employ directly in
their applications and schemas.  High-level Muldis D is formally defined
using the exact same methods available to users for writing their own
types/operators/etc, including choices of syntax and features.  It is
canonically written as regular Muldis D packages / code libraries just like
user code is; users can introspect it or write their own alternatives for
parts or the whole of it that look and function as it does.  See
L<Muldis::D::Package::Muldis_D> for the details of high-level Muldis D.

The I<Muldis D Foundation> defines low-level Muldis D, which is the
system-defined types and operators and other features which are canonically
written in one or more third-party languages which are I<hosting> Muldis D,
whether for purposes of bootstrapping Muldis D or for purposes of
integrating the languages in a common user development environment.

The Muldis D Foundation encompases fundamental types and operators that
best practice would deem each host should be taking care of their
implementation details itself and that implementing such higher up would
not be a pragmatic use of resources or would be inappropriate reinventing
the wheel.  Moreover, that is about the level of abstraction where hosts
would tend to strongly diverge from each other in implementation details in
matters that strongly effect performance or that differentiate themselves,
not the least of which is functional vs procedural or distributed vs not,
or static vs dynamic, or other matters of algorithms and integration.

Low-level Muldis D is a polar opposite of high-level; its API is not
defined or invokable or introspectable in the same way as normal Muldis D
code, and users can not define their own substitutes that have the exact
same user syntax as they have.  The purpose of low-level is to provide the
basis for writing the system-defined high level language, and users should
not normally be invoking low-level directly, although they do in fact have
all of the same freedom to do so if the situation warrants.

Canonically speaking, any system-defined entities defined as part of
high-level Muldis D can just be written once and be shared by all host
implementations as is, and so porting Muldis D to a new host can be done
with fairly little work in order for it to run at all.  The Muldis D
Foundation is minimized to the reasonable bare bones on purpose in order
largely to aid this (and largely to increase user substitutability).  That
being said, each host implementation is free to override the
implementations of any Muldis D code, whether part of high-level Muldis D
or part of a user's own code, with host-native implementations in order to
boost performance.  It is in fact assumed that such overrides will be
common, with simple hosts doing little of it and sophisticated industrial
strength hosts doing it a lot.  As long as the actual semantics as seen by
the user is unchanged, this is all fair game.  The design of Muldis D is
also meant to help hosts do this more reliably and with fewer errors.

Formally speaking, all low-level data types are anonymous, and this
documentation refers to them italicized like I<foo>; any I<foo> is for
human reference and that name doesn't physically exist as part of the
low-level API as a type or contract name.  In contrast, all low-level
operators/routines are named, and the documentation refers to them like
C<foo> as they do physically exist as part of the low-level API.

The high-level API gives more user-friendly physical C<foo> names to all of
the above in its own contract/routine wrappers for the low-level entities,
but those names won't be used in this Muldis D Foundation document.

The low-level entity names given here, whether anonymous or not, are
purposefully given different names than their high-level wrappers have,
to help easily distinguish them; mainly they have C<FDN__> prefixes.

=head1 FOUNDATION TYPES

I<TODO.>

=head2 FDN__Anything

The I<FDN__Anything> type is the infinite I<universal type>, which is the
maximal data type of the entire Muldis D type system and consists of all
values which can possibly exist.  It is a union type over just these 6
low-level types, all of the latter being mutually disjoint:
I<FDN__Boolean>, I<FDN__Integer_Inf>, I<FDN__Array_Inf>,
I<FDN__Bag_Inf>, I<FDN__Structure_Inf>, I<FDN__External>.

I<TODO.>

=head2 FDN__Boolean

I<TODO.>

=head2 FDN__Integer_Inf

I<TODO.>

=head2 FDN__Array_Inf

I<TODO.>

=head2 FDN__Bag_Inf

I<TODO.>

=head2 FDN__Structure_Inf

I<TODO.>

=head2 FDN__External

I<TODO.>

=head1 FOUNDATION SUBTYPES FOR DEFINING SOURCE CODE

I<TODO.>

=head2 ...

I<TODO.>

=head1 FOUNDATION CONSTANTS

I<TODO.>

=head2 FDN__False

I<TODO.>

=head2 FDN__True

I<TODO.>

=head2 FDN__default_External

I<TODO.>

=head1 FOUNDATION FUNCTIONS

I<TODO.>

Every low-level routine takes an argument of just the I<FDN__Anything>
type, so any value expression will bind to it; and any further input
restrictions will be defined in their bodies as thrown exceptions.

=head2 FDN__isa_Boolean

I<TODO.>

=head2 FDN__isa_Integer_Inf

I<TODO.>

=head2 FDN__isa_Array_Inf

I<TODO.>

=head2 FDN__isa_Bag_Inf

I<TODO.>

=head2 FDN__isa_Structure_Inf

I<TODO.>

=head2 FDN__isa_External

I<TODO.>

=head2 FDN__same

I<TODO.>

=head2 FDN__Int_from_Text_10

I<TODO.>

=head2 FDN__Int_from_Text_16

I<TODO.>

=head2 FDN__Integers_in_order

I<TODO.>

=head2 FDN__Array_elem

I<TODO.>

=head2 FDN__Array_has_elem

I<TODO.>

=head2 FDN__Array_count

I<TODO.>

=head2 FDN__Array_has

I<TODO.>

=head2 FDN__Array_nest

I<TODO.>

=head2 FDN__Array_unnest

I<TODO.>

=head2 FDN__Array_where

I<TODO.>

=head2 FDN__Array_map

I<TODO.>

=head2 FDN__Array_reduce

I<TODO.>

=head2 FDN__Array_slice

I<TODO.>

=head2 FDN__Array_catenate

I<TODO.>

=head2 FDN__Array_index_succ_all_matches

I<TODO.>

=head2 FDN__Bag_count

I<TODO.>

=head2 FDN__Bag_has

I<TODO.>

=head2 FDN__Bag_nest

I<TODO.>

=head2 FDN__Bag_unnest

I<TODO.>

=head2 FDN__Bag_where

I<TODO.>

=head2 FDN__Bag_map

I<TODO.>

=head2 FDN__Bag_reduce);

I<TODO.>

=head2 FDN__Structure_degree

I<TODO.>

=head2 FDN__Structure_field

I<TODO.>

=head2 FDN__Structure_has_field

I<TODO.>

=head2 FDN__Structure_on_fields

I<TODO.>

=head2 FDN__Structure_but_fields

I<TODO.>

=head2 FDN__Structure_extend

I<TODO.>

=head2 ...

I<TODO.>

=head1 FOUNDATION PROCEDURES

I<TODO.>

=head2 ...

I<TODO.>

=head1 SEE ALSO

Go to L<Muldis::D> for the majority of distribution-internal
references, and L<Muldis::D::See_Also> for the majority of
distribution-external references.

=head1 AUTHOR

Darren Duncan (C<darren@DarrenDuncan.net>)

=head1 LICENSE AND COPYRIGHT

This file is part of the formal specification of the Muldis D language.

Muldis D is Copyright Â© 2002-2015, Muldis Data Systems, Inc.

See the LICENSE AND COPYRIGHT of L<Muldis::D> for details.

=head1 TRADEMARK POLICY

The TRADEMARK POLICY in L<Muldis::D> applies to this file too.

=head1 ACKNOWLEDGEMENTS

The ACKNOWLEDGEMENTS in L<Muldis::D> apply to this file too.

=cut
