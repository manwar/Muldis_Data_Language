=pod

=encoding utf8

=head1 NAME

Muldis::D::Dialect::HDMD_Perl6_Tiny -
How to format Perl 6 Hosted Data Muldis D

=head1 VERSION

This document is Muldis::D::Dialect::HDMD_Perl6_Tiny version 0.55.0.

=head1 PREFACE

This document is part of the Muldis D language specification, whose root
document is L<Muldis::D>; you should read that root document
before you read this one, which provides subservient details.

=head1 DESCRIPTION

This document outlines the grammar of the I<Hosted Data Muldis D> dialect
named C<HDMD_Perl6_Tiny>.  The fully-qualified name of this Muldis D
dialect, in combination with the base language spec it is bundled with, is
C<[ 'Muldis_D', 'http://muldis.com', 'N.N.N', 'HDMD_Perl6_Tiny' ]> (when
the bundled base language version is substituted for the C<N.N.N>).

This dialect is designed to exactly match the Muldis D system catalog (the
possible representation of Muldis D code that is visible to or updateable
by Muldis D programs at runtime) as to what non-critical meta-data it
explicitly stores; so code in the C<HDMD_Perl6_Tiny> dialect should be
round-trippable with the system catalog with the result maintaining all the
details that were started with.  Since it matches the system catalog, this
dialect should be able to exactly represent all possible Muldis D base
language code (and probably all extensions too), rather than a subset of
it.  This dialect similarly matches the
L<PTMD_Tiny|Muldis::D::Dialect::PTMD_Tiny> dialect; in fact, most of the
details in common with that other dialect are described just in the current
file, for both dialects.

This dialect is designed to be as small as possible while meeting the above
criteria, and is designed such that a parser that handles all of this
dialect can be tiny, hence the dialect's C<Tiny> name.  Likewise, a code
generator for this dialect from the system catalog can be tiny.

The C<HDMD_Perl6_Tiny> dialect is defined to be hosted in Perl 6, and is
composed of just|mainly core Perl 6 types.  This dialect is optimized for
Perl 6 specifically, and doesn't try to match the version for Perl 5; you
*will* have to reformat any Perl Hosted Data Muldis D when migrating
between Perl 5 and Perl 6, same as with your ordinary Perl code.

Fundamentally, the various Muldis D scalar and collection types are
represented by their equivalent Perl 6 native scalar and collection
types.  But since Muldis D is more strongly typed, or at least differently
typed, than Perl 6, each Muldis D literal is represented by a Perl 6 Array,
whose elements include both the payload Perl 6 literal plus explicit
meta-data for how to interpret that Perl 6 literal for mapping to Muldis D.

This document mainly just specifies a way to represent Muldis D values as
Perl 6 values.  Since the fundamental way to do data definition in Muldis D
is to update catalog (information schema) variables, aka the Muldis D
meta-model, which are themselves just data, then this document only needs
to tell you how to define values to put in the catalog variables.  Defining
data types or routines are done by defining catalog values describing them.

See instead L<Muldis::D::Core> for how to actually define the
tuples and relations that define your data types and routines and queries
and so forth.

For the present, this document will use the term I<PHMD> (I<Perl 6 Hosted
Muldis D>) for brevity when referring to aspects of the Perl 6-Tiny
dialect.

=head1 GENERAL STRUCTURE

A PHMD value is composed mainly of a tree of Perl Array, such that each
Array is a tree node.  The elements of each node/Array include typically a
native Perl payload value, which may be a PHMD value itself, plus meta-data
for that payload, that meta-data typically including the analogy of a class
name, were PHMD nodes instead represented by a tree of PHMD-specific
objects.  While a PHMD main node would generally be represented by an
Array|Seq, Perl provides the extra option in common cases that a PHMD node
may be represented by a Perl Pair value.

Every PHMD node representing a Muldis D value literal has 1-3 elements:

=over

=item *

Node kind: a Perl C<Str> value of the format C<< <[ a..z A..Z 0..9 _ ]>+
>>.  All of the PHMD node kinds for Muldis D value literals are these 30:
C<(|Q)Scalar>, C<Bool>, C<Int>, C<String>, C<Blob>, C<Text>, C<(|Q)Tuple>,
C<(|Q)Relation>, C<(|Q)Set>, C<Nothing>, C<(|Q)Single>, C<(|Q)Array>,
C<(|Q)Bag>, C<Name>, C<NameChain>, C<DeclNameChain>, C<Comment>, C<Order>,
C<Rat>, C<RatRoundMeth>, C<(UTC|Float)Instant>, C<Duration>.  All of the
non-value-literal PHMD node kinds currently defined are these 2:
C<Muldis_D>, C<boot_call>.

=item *

Only when the node has 3 elements; type name: as per the payload of a
C<NameChain> PHMD node.  PHMD nodes of all of the aforementioned 30
value-specific kinds can have the 2nd type name node element except for
these 4: C<Bool>, C<Nothing>, C<Order>, C<RatRoundMeth>; this isn't because
those types can't be subtyped, but because in practice doing so isn't
useful.  Furthermore, with just the C<(|Q)Scalar> kinds, having the second
type name element is mandatory.  Non-value-literal PHMD nodes never have
this type name element.

=item *

Only when the node kind is not C<Nothing>; the payload: its allowed formats
depend on the node kind, and are defined separately per each node kind,
further below.

=back

A Pair may alternately be used to represent a main PHMD node iff that node
has exactly 2 elements (node kind and payload); in that case, the node kind
is stored in that Pair's key, and the payload is stored in the Pair's
value.

Generally speaking, no Perl undefined values are allowed anywhere in a PHMD
value; you must use only defined values instead.  This documentation also
assumes that only defined values are used, and that supplying a Perl undef
will result in an error.  Exceptions to this are explicitly noted.

=head1 BOOTLOADER

A full or partial Muldis D C<bootloader> routine consists of a language
name declaration plus a series of 0..N imperative routine calls.  A
C<bootloader> is formatted as a PHMD node having 1..N elements, where the
first element is a PHMD node defining a Muldis D "language name", and each
remaining element is a PHMD node defining a "bootloader imperative routine
call".

Examples:

    [
        [ 'Muldis_D', 'http://muldis.com', '1.2.3', 'HDMD_Perl6_Tiny',
            {} ],
        [ 'boot_call', 'sys.std.Core.Cat.create_depot_procedure',
            {}, { ... } ],
    ]

=head1 LANGUAGE NAME

As per the VERSIONING pod section of L<Muldis::D>, code written in
Muldis D must start by declaring the fully-qualified Muldis D language name
it is written in.  The C<HDMD_Perl6_Tiny> dialect formats this name as a
PHMD node having the following 5 elements:

=over

=item *

Node kind / language base name: the Perl C<Str> value C<Muldis_D>.

=item *

Base authority: a Perl C<Str> as per the payload of a C<Text> node;
typically the Perl C<Str> value C<http://muldis.com>.

=item *

Base version number: a Perl C<Str> as per the payload of a C<Text> node;
typically a Perl C<Str> value like C<1.2.3>.

=item *

Dialect: the Perl C<Str> value C<HDMD_Perl6_Tiny>.

=item *

Extensions: a Perl C<Hash|Mapping> as per the payload of a C<Tuple> node;
see the L<MULDIS D TINY DIALECT PRAGMAS> pod section for more details.

=back

Examples:

    [ 'Muldis_D', 'http://muldis.com', '1.2.3', 'HDMD_Perl6_Tiny', {} ]

    [ 'Muldis_D', 'http://muldis.com', '1.2.3', 'HDMD_Perl6_Tiny', {
        auto_add_attrs          => :Bool(Bool::True),
        auto_unabbrev_std_names => :Bool(Bool::True),
        auto_chains_from_names  => :Bool(Bool::True),
    } ]

More specifically, a language name PHMD node like the above would generally
be the input for a Perl Hosted Muldis D implementating virtual machine's
configuration step, which provides a context for subsequent feeding of
other PHMD trees to said virtual machine.

=head1 BOOTLOADER IMPERATIVE ROUTINE CALL

This PHMD node specifies one statement of a Muldis D C<bootloader> routine
which invokes an imperative routine, such statements being what the entire
body of a C<bootloader> is composed of.  A bootloader imperative routine
call is formatted as a PHMD node having the following 4 elements:

=over

=item *

Node kind: the Perl C<Str> value C<boot_call>.

=item *

Imperative routine name: a Perl C<Array|Seq|Str> as per the payload of a
C<NameChain> PHMD node.

=item *

Imperative routine subject-to-update args: a Perl C<Hash|Mapping> as per
the payload of a C<Tuple> PHMD node except that every C<Hash|Mapping> value
is just a Perl C<Array|Seq|Str> as per the payload of a C<NameChain> PHMD
node (each value is the name of a global variable).

=item *

Imperative routine read-only args: a Perl C<Hash|Mapping> as per the
payload of a C<Tuple> PHMD node.

=back

Examples

    [ 'boot_call', 'sys.std.Core.Cat.create_depot_procedure', {}, { ... } ]

=head1 CORE GENERIC SCALAR VALUES

=head2 sys.std.Core.Type.Scalar

This node kind represents a scalar subtype value.  This node is interpreted
as a Muldis D C<sys.std.Core.Type.Scalar> subtype value whose declared type
is specified by the PHMD node's (mandatory for C<Scalar>) type name element
and whose attributes are defined by the payload.  The payload must be a
Perl C<Pair>, whose key and value, respectively, are designated I<possrep
name> and I<possrep attrs>.  The possrep name and possrep attrs must be as
per the payload of a C<Name> and C<Tuple> PHMD node payload, respectively.
The C<Scalar> PHMD node kind can only be used for scalar types that have at
least 1 possrep, and the I<possrep attrs> is interpreted specifically as
attributes of the declared type's possrep which is specified by the
I<possrep name>.  Each key+value pair of the second payload element defines
a named possrep attribute of the new scalar; the pair's key and value are,
respectively, a Perl C<Str> that specifies the possrep attribute name, and
a PHMD node that specifies the possrep attribute value.  (Note that most
scalar types have at least 1 possrep; the only ones that don't are either
union types of types having possreps, or they are core system-defined
types, and those all have their own dedicated syntax for literals.)

Examples:

    [ 'Scalar', 'sys.std.Rational.Type.Rat', float => {
        mantissa => :Int(45207196),
        radix    => :Int(10),
        exponent => :Int(37),
    } ]

    [ 'Scalar', 'sys.std.Temporal.Type.UTCDateTime', datetime => {
        year   => :Int(2003),
        month  => :Int(10),
        day    => :Int(26),
        hour   => :Int(1),
        minute => :Int(30),
        second => :Rat(0),
    } ]

    [ 'Scalar', 'fed.lib.the_db.WeekDay', name => {
        '' => :Text<monday>,
    } ]

    [ 'Scalar', 'fed.lib.the_db.WeekDay', number => {
        '' => :Int(5),
    } ]

=head2 sys.std.Core.Type.Bool

This node kind represents a logical boolean value.  It is interpreted as a
Muldis D C<sys.std.Core.Type.Bool> value as follows:  The payload must be a
Perl C<Bool>, and so C<Bool::False> and C<Bool::True> are mapped
directly.

Examples:

    :Bool(Bool::True)

=head2 sys.std.Core.Type.Int

This node kind represents an integer value.  This node is interpreted as a
Muldis D C<sys.std.Core.Type.Int> value as follows:  The payload must be a
Perl C<Int>, which is mapped directly.

Examples:

    :Int(:2<11001001>) # binary

    :Int(:8<0>) # octal

    :Int(:8<644>) # octal

    :Int(-34) # decimal

    :Int(42) # decimal

    :Int(:16<DEADBEEF>) # hexadecimal

    :Int(:36<-HELLOWORLD>) # base-36

    :Int(:4<301>) # base-4

    :Int(:12<A09B>) # base-12

=head2 sys.std.Core.Type.String

This node kind represents an integer string value.  This node is
interpreted as a Muldis D C<sys.std.Core.Type.String> value as follows:
The payload must be a Perl C<Seq|Array>, whose elements are all Perl
C<Int>, which is mapped directly; each payload element is mapped directly
as per the payload of an C<Int> PHMD node.

Examples:

    :String[0x50,0x65,0x72,0x6C] # Unicode codepoints = 'Perl'

    :String[80,101,114,109] # same thing

=head2 sys.std.Core.Type.Blob

This node kind represents a bit string.  This node is interpreted as a
Muldis D C<sys.std.Core.Type.Blob> value as follows:  The payload must be a
Perl C<Blob>, which is mapped directly.

Examples I<TODO: What is the actual syntax for the P6 Blob type?>:

    :Blob( Blob.new(  2 => '00101110100010' ) ) # binary

    :Blob( Blob.new(  4 => '' ) )

    :Blob( Blob.new( 16 => 'A705E' ) ) # hexadecimal

    :Blob( Blob.new(  8 => '523504376' ) )

=head2 sys.std.Core.Type.Text

This node kind represents a character string.  This node is interpreted as
a Muldis D C<sys.std.Core.Type.Text> value by directly mapping the payload.
Note that, while Plain Text Muldis D may contain a few escape sequences,
those would be replaced with what they represent prior to making a PHMD
node.  The payload must be a Perl C<Str>.

Examples:

    :Text<Ceres>

    :Text<サンプル>

    :Text<>

    :Text<Perl>

=head1 CORE GENERIC NONSCALAR VALUES

=head2 sys.std.Core.Type.Tuple

This node kind represents a tuple value.  This node is interpreted as a
Muldis D C<sys.std.Core.Type.Tuple> value whose attributes are defined by
the payload.  Under Perl, the payload must be a Perl C<Mapping|Hash>.
Each key+value pair of the payload defines a named attribute of the new
tuple; the pair's key and value are, respectively, a Perl C<Str> that
specifies the attribute name, and a PHMD node that specifies the attribute
value.

Examples:

    :Tuple{}

    [ 'Tuple', 'type.tuple_from.var.fed.data.the_db.account.users', {
        login_name => :Text<hartmark>,
        login_pass => :Text<letmein>,
        is_special => :Bool(Bool::True),
    } ]

    :Tuple{
        name => :Text<Michelle>,
        age  => :Int(17),
    }

=head2 sys.std.Core.Type.Relation

This node kind represents a relation value.  This node is interpreted as a
Muldis D C<sys.std.Core.Type.Relation> value whose attributes and tuples
are defined by the payload.  The payload is interpreted as follows:

=over

=item *

Iff the payload is a Perl C<Set|KeySet> with zero elements, then it
defines the only relation value having zero attributes and zero tuples.

=item *

Iff the payload is a Perl C<Set|KeySet> with at least one element, and
every element is a Perl C<Str> (as per a valid payload for a C<Name> PHMD
node), then it defines the attribute names of a relation having zero
tuples.

=item *

Iff the payload is a Perl C<Set|KeySet> with at least one element, and
every element is a Perl C<Mapping|Hash> (as per a valid payload for a
C<Tuple> PHMD node), then each element of the payload defines a tuple of
the new relation; every tuple-defining element of the payload must be of
the same degree and have the same attribute names as its sibling elements;
these are the degree and attribute names of the relation as a whole, which
is its heading for the current purposes.

=item *

Iff the payload is a Perl C<Pair>, then:  The new relation value's
attribute names are defined by the payload's key, which is a Perl
C<Seq|Array> of C<Str> (each as per a C<Name> node payload), and the
relation body's tuples' attribute values are defined by the payload's
value, which is a Perl C<Set|KeySet> of C<Seq|Array> of tuple attribute
value defining PHMD nodes.  This format is meant to be the most compact of
the generic relation payload formats, as the attribute names only appear
once for the relation rather than repeating for each tuple.  As a
trade-off, the attribute values per tuple from the payload value must
appear in the same order as their corresponding attribute names appear in
the payload key, as the names and values in the relation literal are
matched up by ordinal position here.

=back

Examples I<TODO: What is the actual syntax for the P6 Set type?>:

    :Relation( Set.new() )  # zero attrs + zero tuples

    :Relation( Set.new(<x y z>) )  # 3 attrs + zero tuples

    :Relation( Set.new( {} ) )  # zero attrs + 1 tuple

    :Relation( Set.new(
        {
            login_name => :Text<hartmark>,
            login_pass => :Text<letmein>,
            is_special => :Bool(Bool::True),
        },
    ) )  # 3 attrs + 1 tuple

    [ 'Relation', 'fed.lib.the_db.gene.Person', <name age> => Set.new(
        [ :Text<Michelle>, :Int(17) ],
    ) ]  # 2 attrs + 1 tuple

=head2 sys.std.Core.Type.Set

This node kind represents a set value.  This node is interpreted as a
Muldis D C<sys.std.Core.Type.Set> value whose elements are defined by the
payload.  The payload must be a Perl C<Set|KeySet>.  Each element of the
payload defines a unary tuple of the new set; each element is a PHMD node
that defines the C<value> attribute of the tuple.

Examples I<TODO: What is the actual syntax for the P6 Set type?>:

    [ 'Set', 'fed.lib.the_db.account.Country_Names', Set.new(
        :Text<Canada>,
        :Text<Spain>,
        :Text<Jordan>,
        :Text<Thailand>,
    ) ]

    :Set( Set.new(
        :Int(3),
        :Int(16),
        :Int(85),
    ) )

=head2 sys.std.Core.Type.Nothing

This node kind represents a 'nothing' value; it is interpreted as a Muldis
D C<sys.std.Core.Type.Nothing>.  It has 1 element, which is the Perl C<Str>
value C<Nothing>.

Examples:

    :Nothing()  # or how does Perl 6 make a Pair with undef/default value?

=head2 sys.std.Core.Type.Single

This node kind represents a 'single' value.  Its payload is a PHMD node
that defines a single scalar or nonscalar value.  This node is interpreted
as a Muldis D C<sys.std.Core.Type.Single> value whose element is defined by
the payload.  The payload is a PHMD node that defines the C<value>
attribute of the single tuple of the new 'single'.

Examples:

    :Single( :Text('I know this one!') )

=head2 sys.std.Core.Type.Array

This node kind represents a sequence value.  This node is interpreted as a
Muldis D C<sys.std.Core.Type.Array> value whose elements are defined by the
payload.  The payload must be a Perl C<Seq|Array>.  Each element of the
payload defines a binary tuple of the new sequence; the element value is a
PHMD node that defines the C<value> attribute of the tuple, and the element
index is used as the C<index> attribute of the tuple.

Examples:

    :Array[
        :Text<Alphonse>,
        :Text<Edward>,
        :Text<Winry>,
    ]

    [ 'Array', 'fed.lib.the_db.stats.Samples_By_Order', [
        :Int(57),
        :Int(45),
        :Int(63),
        :Int(61),
    ] ]

=head2 sys.std.Core.Type.Bag

This node kind represents a bag value.  This node is interpreted as a
Muldis D C<sys.std.Core.Type.Bag> value whose elements are defined by the
payload.  The payload must be a Perl C<Bag|KeyBag|Set|KeySet> value;
the payload element keys are PHMD nodes corresponding to the C<value>
attribute of the new bag's tuples, and the payload element values are
positive integers (or C<Bool::True>, which counts as the number 1)
corresponding to the C<count> attribute; the payload element mapping is as
you should expect.

Examples I<TODO: What is the actual syntax for the P6 Bag type?>:

    [ 'Bag', 'fed.lib.the_db.inventory.Fruit', Bag.new(
        :Text<Apple>  => 500,
        :Text<Orange> => 300,
        :Text<Banana> => 400,
    ) ]

    :Bag( Bag.new( [
        :Text<Foo>,
        :Text<Quux>,
        :Text<Foo>,
        :Text<Bar>,
        :Text<Baz>,
        :Text<Baz>,
    ] ) )

=head1 QUASI- VALUES

Every PHMD node kind for a generic scalar or nonscalar literal has a
corresponding extra PHMD node kind for a quasi- literal.  The corresponding
extra quasi- node kinds are exactly the same in format to the non-quasi
types but that for each one of them, the value of its first element has the
Perl C<Str> value C<Q> prepended.  So PHMD nodes whose first elements each
are [C<QScalar>, C<QTuple>, C<QRelation>, C<QSet>, C<QSingle>, C<QArray>,
C<QBag>] are interpreted as Muldis D [C<sys.std.Core.Type.QScalar>,
C<sys.std.Core.Type.QTuple>, C<sys.std.Core.Type.QRelation>,
C<sys.std.Core.Type.QSet>, C<sys.std.Core.Type.QSingle>,
C<sys.std.Core.Type.QArray>, C<sys.std.Core.Type.QBag>] values,
respectively.

=head1 CATALOG SCALAR VALUES

=head2 sys.std.Core.Type.Cat.Name

This node kind represents a canonical short name for any kind of DBMS
entity when declaring it; it is a character string type, that is disjoint
from C<Text>.  This node is interpreted as a Muldis D
C<sys.std.Core.Type.Cat.Name> value by directly mapping the payload.  Note
that, while Plain Text Muldis D may contain a few escape sequences, those
would be replaced with what they represent prior to making a PHMD node.
The payload must be as per the payload of a C<Text> PHMD node.

Examples:

    :Name<login_pass>

    :Name('First Name')

=head2 sys.std.Core.Type.Cat.NameChain

This node kind represents a canonical long name for invoking a DBMS entity
in some contexts; it is conceptually a sequence of entity short names.  Its
payload is a Perl C<Array|Seq> value or C<Str> (char-mode scalar) value.
This node is interpreted as a Muldis D C<sys.std.Core.Type.Cat.NameChain>
value as follows:

=over

=item *

If the payload is an C<Array|Seq>, then it must have at least 2 elements,
and every element must be a valid payload for a C<Name> PHMD node (that
is, any Perl character string).  Each element of the payload, in order,
defines an element of the C<array> possrep's attribute of a C<NameChain>.

=item *

If the payload is a C<Str>, then it must be formatted as a catenation
(using period (C<.>) separators) of at least 2 parts, where each part can
not have any literal period (C<.>) characters (if you want literal periods
then you can only use the C<Array|Seq> payload format to express it).  The
C<Str> format of payload is interpreted by splitting it on the separators
into the C<Array|Seq> format, then processed as per the latter.

=back

Examples:

    :NameChain['fed','data','the_db','gene','sorted_person_name']

    :NameChain('fed.data.the_db.stats.samples by order')

=head2 sys.std.Core.Type.Cat.DeclNameChain

This node kind is exactly the same as the C<NameChain> node kind, in both
structure/constraints and interpretation, etc, except that it represents a
canonical long name for declaring a DBMS entity in N-depth contexts, and
that the chain may have as few as zero parts rather than as few as 2;
however, a zero part chain can only be expressed with the C<Array|Seq>
payload format; an empty string C<Str> format will be interpreted as having
a single element that is the empty string.

Examples:

    :DeclNameChain['gene','sorted_person_name']

    :DeclNameChain('stats.samples by order')

=head2 sys.std.Core.Type.Cat.Comment

This node kind represents the text of a Muldis D code comment; it is a
character string type, that is disjoint from both C<Text> and C<Name>.
This node is interpreted as a Muldis D C<sys.std.Core.Type.Cat.Comment>
value by directly mapping the payload.  Note that, while Plain Text Muldis
D may contain a few escape sequences, those would be replaced with what
they represent prior to making a PHMD node.  The payload must be as per the
payload of a C<Text> PHMD node.

Examples:

    :Comment('This does something.')

=head2 sys.std.Core.Type.Cat.Order

This node kind represents an order-determination.  This node is interpreted
as a Muldis D C<sys.std.Core.Type.Cat.Order> value as follows:  The payload
must be a Perl C<Order>, and so C<Order::Increase> and C<Order::Same> and
C<Order::Decrease> are mapped directly.

Examples:

    :Order(Order::Same)

=head1 RATIONAL EXTENSION SCALAR VALUES

=head2 sys.std.Rational.Type.Rat

This node kind represents a rational value.  This node is interpreted as a
Muldis D C<sys.std.Rational.Type.Rat> value as follows:  The payload must
be a Perl C<Rat|Num|Int>, which is mapped directly.

Examples:

    :Rat(:2<-1.1>)

    :Rat(-1.5) # same val as prev

    :Rat(3.14159)

    :Rat(:11<0.0>)

    :Rat(:16<DEADBEEF.FACE>)

    :Rat(:36<0.000AZE>)

    :Rat(:7<500001> div :7<1000>)

    :Rat(:12<A09B> div :12<A>)

    :Rat(:2<1011101101> * :2<10> ** :2<-11011>)

    :Rat(45207196 * 10 ** 37)

    :Rat(1 div 43)

    :Rat(314159 * 10 ** -5)

=head2 sys.std.Rational.Type.RatRoundMeth

This node kind represents a rounding method.  This node is interpreted as a
Muldis D C<sys.std.Rational.Type.RatRoundMeth> value by directly mapping
the payload.  The payload must be a Perl C<Str> having one of the 7
values C<half_down>, C<half_up>, C<half_even>, C<to_floor>, C<to_ceiling>,
C<to_zero>, C<to_inf>.

Examples:

    :RatRoundMeth<half_up>

=head1 TEMPORAL EXTENSION SCALAR VALUES

=head2 sys.std.Temporal.Type.UTCInstant

This node kind represents an "instant"/"datetime" value that is affiliated
with the UTC time-zone.  This node is interpreted as a Muldis D
C<sys.std.Temporal.Type.UTCInstant> value whose C<instant> possrep
attribute values are defined by the payload.

The payload must be a Perl C<Seq|Array> with 6 elements, where each element
may be either undefined or defined; or if fewer than 6 elements are
provided, the C<Seq|Array> will be implicitly extended to 6, filling with
undefs.  The 6 payload elements correspond in order, from the lowest to the
highest indexed, to the 6 attributes: C<year>, C<month> C<day>, C<hour>,
C<minute>, C<second>.  For each payload element that Perl considers
undefined or defined, the corresponding attribute has a C<Nothing> or a
C<Single> value, respectively.  For each of the first 5 elements, when it
is defined, it must qualify as a valid payload for an C<Int> PHMD node; for
the 6th element, when it is defined, it must qualify as a valid payload for
a C<Rat> PHMD node.

A defined C<year> may be any integer, each of [C<month>, C<day>] must be a
positive integer, each of [C<hour>, C<minute>] must be a non-negative
integer, and C<second> must be a non-negative rational number.  If all 6
attributes are defined, then the new C<UTCInstant> value is also a
C<UTCDateTime>; if just the first 3 or last 3 are defined, then the value
is not a C<UTCDateTime> but rather a C<UTCDate> or C<UTCTime>,
respectively; if any other combination of attributes are defined, then the
value is just a C<UTCInstant> and not of any of the other 3 subtypes.

Examples:

    :UTCInstant[1964,10,16,16,12,47.5] # a UTCDateTime

    :UTCInstant[2002,12,6] # a UTCDate

    :UTCInstant[undef,undef,undef,14,2,29] # a UTCTime

=head2 sys.std.Temporal.Type.FloatInstant

This node kind is exactly the same as the C<UTCInstant> node kind, in both
structure/constraints and interpretation, etc, except that it represents a
"floating" instant/datetime value, that is not affiliated with any
time-zone, and it is interpreted as a Muldis D
C<sys.std.Temporal.Type.FloatInstant> value.

Examples:

    :FloatInstant[2003,4,5,2] # min,sec unknown or N/A

    :FloatInstant[1407] # just know its sometime in 1407

=head2 sys.std.Temporal.Type.Duration

This node kind represents a duration value, an amount of time, which is not
fixed to any instant in time.  This node is interpreted as a Muldis D
C<sys.std.Temporal.Type.Duration> value whose C<duration> possrep attribute
values are defined by the payload.

The payload must be a Perl C<Seq|Array> with 6 elements, where each element
may be either undefined or defined; or if fewer than 6 elements are
provided, the C<Seq|Array> will be implicitly extended to 6, filling with
undefs.  The 6 payload elements correspond in order, from the lowest to the
highest indexed, to the 6 attributes: C<years>, C<months> C<days>,
C<hours>, C<minutes>, C<seconds>.  For each payload element that Perl
considers undefined or defined, the corresponding attribute has a
C<Nothing> or a C<Single> value, respectively.  For each of the first 5
elements, when it is defined, it must qualify as a valid payload for an
C<Int> PHMD node; for the 6th element, when it is defined, it must qualify
as a valid payload for a C<Rat> PHMD node.

A defined [C<years>, C<months>, C<days>, C<hours>, C<minutes>] may be any
integer, and C<seconds> may be any rational number.  I<Currently,
C<Duration> has no system-defined subtypes, but that may change later.>

Examples:

    :Duration[3,5,1,6,15,45.000012]

=head1 MULDIS D TINY DIALECT PRAGMAS

All of the following pragmas apply to both the C<PTMD_Tiny> and
C<HDMD_Perl6_Tiny> dialects, and have the same semantics with both.

=head2 auto_add_attrs

All Muldis D values, besides scalars lacking any possreps, are defined in
terms of a collection of attribute values, and there is no such thing as an
attribute being undefined; normally when one selects a value of a
particular attribute-based type, they must supply values for I<all> of its
attributes; this is true with values comprising the system catalog as with
any other values.  Code written in the Muldis D C<PTMD_Tiny> or
C<HDMD_Perl6_Tiny> dialect is comprised almost entirely of value literals,
and by default all of the attribute values of said values must be
explicitly given in the literals as sub-literals, even in the common case
where some attributes just have the default values for their type.

While this fact allows for parsers to be very simple and for sub-literals
to be compilable into values without knowing the context they're compiled
into, it means that programmers would have to write maybe about twice as
much code as they otherwise would if they could simply not write out the
default-valued attributes.

If the 5th I<Extensions> portion of the fully-qualified Muldis D language
name contains a name+value pair of C<auto_add_attrs> + C<Bool:true>, then
this activates the optional C<auto_add_attrs> pragma, which provides one
kind of automatic code completion.  When C<auto_add_attrs> is active,
programmers may omit any literal attributes that they want, and those
attributes will be automatically defined by the parser to have the default
values for their type.  Or more specifically, the wider literal whose
attributes are missing will be extended to become the default value of the
type of the wider literal but that those attributes of its that I<were>
explicitly given will override the default's values for those attributes.
The actual behaviour is essentially what the
C<sys.std.QTuple.substitution_in_default> function does.

But the C<auto_add_attrs> pragma is not simply an automatically invoked
pre-processing Muldis D function, because it also serves the common case
where one is defining relation literals that have different attributes
specified per tuple; such a thing by itself isn't even valid as a generic
relation, so it certainly can't be given to a Muldis D function; so the
pragma has at least that advantage unique to itself.

Note that the lexer is exactly the same regardless of whether the
C<auto_add_attrs> pragma is turned on or off, because the matters of
missing attributes were never tested or enforced at the lexical level in
the first place; rather the pragma only affects the parsing stage that
follows the lexing.  In other words, the actual syntax or grammar is
identical regardless of the setting of this pragma.

Now one consequence of using the C<auto_add_attrs> pragma is that in
general the parser must be more complicated, and read type definitions from
the DBMS information schema so that it knows what attributes each literal
is supposed to have, and their declared types, and also sub-literals can no
longer in general be fully converted to values in isolation; now the
parent-most literal must be evaluated first, because its declared type
generally determines the declared types of its attributes, and then their
attributes recursively.  For nonscalar types, the initial declared type
being looked at is the declared type of the bootloader-invoked routine's
parameter that the literal is being given to as an argument.

Now if the declared type of said parameter is just a generic type, such as
C<Relation> or C<Array>, then often no information can be gleaned from this
context for what attributes should exist, and so you will need to make the
arg literal include treat-as-type metadata that explicitly provides the
specific type information needed; otherwise, C<auto_add_attrs> won't help
you and you must then fully define relation values with the same attributes
per tuple.  But fortunately for brevity, a lot of the places where
C<auto_add_attrs> would help you the most is when the bootloader is
invoking system-defined data-defining procedures, and their parameters are
all of attribute-specifying types, and it is in such data definition that
you may be most likely to face a large number of default-valued attributes,
such as C<comment>.

Note that the reason the C<auto_add_attrs> behaviour is turned off by
default is twofold.  First, the parser can be a lot simpler / more tiny
with it off.  Second, requiring users to explicitly define even
default-valued attributes can make the code more self-documenting and can
help users avoid some kinds of bugs due to action from unseen values, or
due to some default values "silently" changing between language versions.
So then essentially, turning on C<auto_add_attrs> means the programmer is
telling the parser "I know what I'm doing" by I<explicitly> asking for
potentially less-safe behaviour.  Of course, even with C<auto_add_attrs>
turned on, you can still explicitly define attribute values that are their
type's default values, so it is possible to compromise such as you like.

Also note that it should be trivial for a Muldis D implementation to let
users input code written with C<auto_add_attrs> turned on, and then output
the version of that code for their perusal with it turned off, so they can
see what extra values were filled in without having to manually write said.

=head2 auto_unabbrev_std_names

Normally when one is specifying a C<NameChain> literal that is a
reference to a standard system-defined type or routine, they must write out
the name in full, starting with C<sys.std> and so on through the unique
part of the entity name.  While this allows for clearly self-documenting
code, as well as for relatively simple parsers, it can also be added tedium
to programmers that would prefer to write out the names in a less verbose
manner, especially since to a point, a slightly more complicated parser
could still unambiguously resolve a much shorter substring of the name.

If the 5th I<Extensions> portion of the fully-qualified Muldis D language
name contains a name+value pair of C<auto_unabbrev_std_names> +
C<Bool:true>, then this activates the optional C<auto_unabbrev_std_names>
pragma, which provides one kind of automatic code completion.  When
C<auto_unabbrev_std_names> is active, programmers may omit any number of
consecutive leading chain elements from such a C<NameChain> literal, so
long as the remaining unqualified chain is distinct among all standard
system-defined (C<sys.std>-prefix) DBMS entities (but that as an exception,
a non-distinct abbreviation is allowed iff exactly 1 of the candidate
entities is in the language core, C<sys.std.Core>-prefix, in which case
that 1 is unambiguously the entity that is resolved to).  This feature has
no effect on the namespace prefixes like C<tuple_from> or C<array_of>; one
still writes those as normal prepended to the otherwise shortened chains.

So for example, one can just write C<Int> rather than
C<sys.std.Core.Type.Int>, C<is_identical> rather than
C<sys.std.Core.Universal.is_identical>, C<QTuple.attr> rather than
C<sys.std.Core.QTuple.attr>, C<min> rather than C<sys.std.Ordered.min>,
C<array_of.Rat> rather than C<array_of.sys.std.Rational.Type.Rat>, and so
on.

The C<auto_unabbrev_std_names> pragma intentionally does not empower auto
un-abbreviations of any namespaces other than C<sys.std>, to keep things
simple for users to predict and for systems to implement; it does not
affect C<sys.(imp|cat)>, nor any other top-level namespace.  When one is
referencing either any system-defined implementation-specific
(non-standard) types or routines, or any user-defined types or routines, or
any dbvars or constraints or whatever, their names can not be written
abbreviated due to the C<auto_unabbrev_std_names> pragma.

Note that the lexer is exactly the same regardless of whether the
C<auto_unabbrev_std_names> pragma is turned on or off, as per the
C<auto_add_attrs> pragma.  Many other comments about the other pragma also
apply to this one.

=head2 auto_chains_from_names

Iff both the C<auto_add_attrs> and C<auto_unabbrev_std_names> pragmas are
active, then the optional C<auto_chains_from_names> dependent pragma may be
activated in the same manner (as an I<Extensions> name+value pair with
C<Bool:true>.  When C<auto_chains_from_names> is active, programmers may
write an otherwise abbreviated-to-one-chain-element C<NameChain>
literal as a plain C<Name> literal; this can chop the literal down to a
third or fourth of its otherwise-length such as in the case of a reference
to the C<Int> type.  When the parent literal of such a faux-C<Name>
literal is examined for missing attributes, or examined that existing
attributes are of the correct type, any attributes whose declared type says
they are supposed to be C<NameChain> but that have an explicitly
defined C<Name> child literal will have that literal mapped to and
replaced with a single element C<NameChain> literal, which can be
subsequently un-abbreviated into a standard system-defined type or routine
name.  The C<auto_chains_from_names> pragma will not work when the declared
type being applied to a faux-C<Name> is not a C<NameChain> subtype,
and such literals will then be taken as actual C<Name>; where such
declared type information is missing, you will need to write out the
abbreviated chain as an actual C<NameChain> literal.  Note that the
C<auto_chains_from_names> pragma has no effect on C<NameChain> literal
bodies that don't comprise the payload portion of their parent literal,
such as with the imperative routine name composed into a C<boot_call>
literal; literal bodies in those positions will always be interpreted
according to C<NameChain> literal body syntax.

=head1 SEE ALSO

Go to L<Muldis::D> for the majority of distribution-internal
references, and L<Muldis::D::SeeAlso> for the majority of
distribution-external references.

=head1 AUTHOR

Darren Duncan (C<perl@DarrenDuncan.net>)

=head1 LICENSE AND COPYRIGHT

This file is part of the formal specification of the Muldis D language.

Muldis D is Copyright © 2002-2008, Darren Duncan.

See the LICENSE AND COPYRIGHT of L<Muldis::D> for details.

=head1 TRADEMARK POLICY

The TRADEMARK POLICY in L<Muldis::D> applies to this file too.

=head1 ACKNOWLEDGEMENTS

The ACKNOWLEDGEMENTS in L<Muldis::D> apply to this file too.

=cut
