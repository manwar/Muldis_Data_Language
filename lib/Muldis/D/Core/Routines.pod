=pod

=encoding utf8

=head1 NAME

Muldis::D::Core::Routines -
Muldis D general purpose routines

=head1 VERSION

This document is Muldis::D::Core::Routines version 0.100.0.

=head1 PREFACE

This document is part of the Muldis D language specification, whose root
document is L<Muldis::D>; you should read that root document before
you read this one, which provides subservient details.  Moreover, you
should read the L<Muldis::D::Core> document before this current
document, as that forms its own tree beneath a root document branch.

=head1 DESCRIPTION

This document contains one or more sections that were moved here from
L<Muldis::D::Core> so that said other document would not be too large.

=head1 SYSTEM-DEFINED GENERIC UNIVERSAL FUNCTIONS

These functions are applicable to values of any data type at all.

=head2 sys.std.Core.Universal.is_identical

C<< function sys.std.Core.Universal.is_identical (Bool <--
$topic : Universal, $other : Universal) >>

This symmetric function results in C<Bool:true> iff its 2
arguments are exactly the same value, and C<Bool:false> otherwise.  This
function will warn if, in regards to the declared types of its arguments,
none of the following are true: 1. they are both subtypes of a common
scalar root type; 2. they are both subtypes of a common complete tuple
or relation type, that is they essentially have the same headings; 3. at
least one type is a generic (eg-C<Universal>) or incomplete
(eg-C<Relation>) type, and it is a supertype of the other.  Note that
this operation is also known as I<is equal> or C<=>.

=head2 sys.std.Core.Universal.is_not_identical

C<< function sys.std.Core.Universal.is_not_identical (Bool <--
$topic : Universal, $other : Universal) >>

This symmetric function is exactly the same as
C<sys.std.Core.Universal.is_identical> except that it results in the
opposite boolean value when given the same arguments.  Note that this
operation is also known as I<is not equal> or C<â‰ > or C<!=>.

=head2 sys.std.Core.Universal.is_value_of_type

C<< function sys.std.Core.Universal.is_value_of_type (Bool <--
$topic : Universal, $type : TypeRef) >>

This function results in C<Bool:true> iff the value of its C<topic>
argument is a member of the data type whose name is given in the C<type>
argument, and C<Bool:false> otherwise.  As trivial cases, this function
always results in C<Bool:true> if the named type is C<Universal>, and
C<Bool:false> if it is C<Empty>.  This function will fail if the named type
doesn't exist in the virtual machine.  Note that this operation is also
known as C<isa>.

=head2 sys.std.Core.Universal.is_not_value_of_type

C<< function sys.std.Core.Universal.is_not_value_of_type (Bool <--
$topic : Universal, $type : TypeRef) >>

This function is exactly the same as
C<sys.std.Core.Universal.is_value_of_type> except that it results in the
opposite boolean value when given the same arguments.  Note that this
operation is also known as C<!isa> or C<not-isa>.

=head2 sys.std.Core.Universal.treated

C<< function sys.std.Core.Universal.treated (Universal <--
$topic : Universal, $as : TypeRef) >>

This function results in the value of its C<topic> argument, but that the
declared type of the result is the not-C<Empty> data type whose name is
given in the C<as> argument.  This function will fail if the named type
doesn't exist in the virtual machine, or if C<topic> isn't a member of the
named type.  The purpose of C<treated> is to permit taking values from a
context having a more generic declared type, and using them in a context
having a more specific declared type; such an action would otherwise be
blocked at compile time due to a type-mismatch error; C<treated> causes the
type-mismatch validation, and possible failure, to happen at runtime
instead, on the actual value rather than declared value.  For example, if
you are storing an C<Int> value in a C<Scalar>-typed variable, using
C<treated> will cause the compiler to let you use that variable as an
argument to C<sys.std.Integer.diff>, which it otherwise wouldn't.  Note
that this operation is also known as C<as>.

=head2 sys.std.Core.Universal.default

C<< function sys.std.Core.Universal.default (Universal <-- $of : TypeRef)
>>

This function is the externalization of a not-C<Empty> data type's I<type
default> C<named-value> function.  This function results in the default
value of the not-C<Empty> data type whose name is given in the C<of>
argument, and the declared type of the result is that same type.  This
function will fail if the named type doesn't exist in the virtual machine,
either at compile or runtime depending whether the type is in the system or
user namespace. This function is conceptually implicitly used to provide
default values for variables, so they always hold valid values of their
declared type.  Note that this operation is also known as C<d>.

=head2 sys.std.Core.Universal.assertion

C<< function sys.std.Core.Universal.assertion (Universal <--
$is_true : Bool, $result : Universal) >>

This function results in the value of its C<result> argument, when its
C<is_true> argument is C<Bool:true>.  This function will fail if its
C<is_true> argument is C<Bool:false>.  The purpose of C<assertion> is to
perform condition assertions in a pure functional context that may be
better done without the overhead of creating a new constrained data type,
especially when the assertion is on some fact that is only known after
performing calculations from multiple function arguments; this can
potentially be done at compile time as per type constraints.  Note that
this operation is also known as C<asserting>.

=head1 SYSTEM-DEFINED GENERIC SCALAR-CONCERNING FUNCTIONS

These functions are applicable to mainly scalar types, but are generic in
that they typically work with any scalar types.  Note that the
terminology used to describe these functions is taking advantage of the
fact that a scalar possrep looks just like a tuple.  Each C<possrep>
and C<name> parameter is optional and each defaults to the empty string if
no explicit argument is given to it.

=head2 sys.std.Core.Scalar.attr

C<< function sys.std.Core.Scalar.attr (Universal <-- $topic : Scalar,
$possrep? : Name, $name? : Name) >>

This function results in the scalar or nonscalar value of the possrep
attribute of C<topic> where the possrep name is given by C<possrep> and the
attribute name is given by C<name>.  This function will fail if C<possrep>
specifies a possrep name that C<topic> doesn't have or C<name> specifies an
attribute name that the named possrep of C<topic> doesn't have.  Note that
this operation is also known as C<.${}>.

=head2 sys.std.Core.Scalar.update_attr

C<< function sys.std.Core.Scalar.update_attr (Scalar <-- $topic : Scalar,
$possrep? : Name, $name? : Name, $value : Universal) >>

This function results in its C<topic> argument but that its possrep
attribute whose possrep name is C<possrep> and whose attribute name is
C<name> has been updated with a new scalar or nonscalar value given by
C<value>.  This function will fail if C<possrep> specifies a possrep name
that C<topic> doesn't have or C<name> specifies an attribute name that the
named possrep of C<topic> doesn't have, or if C<value> isn't of the
declared type of the attribute; this function will otherwise warn if the
declared type of C<value> isn't a subtype of the declared type of the
attribute.

=head2 sys.std.Core.Scalar.multi_update

C<< function sys.std.Core.Scalar.multi_update (Scalar <-- $topic : Scalar,
$possrep? : Name, $attrs : Tuple) >>

This function is like C<sys.std.Core.Scalar.update_attr> except that it
handles N scalar possrep attributes at once rather than just 1.  The
heading of the C<attrs> argument must be a subset of the heading of the
C<topic> argument's possrep named by C<possrep>; this function's result is
C<topic> with all the possrep attribute values of C<attrs> substituted into
it.  This function could alternately be named
I<sys.std.Core.Scalar.static_subst>.

=head2 sys.std.Core.Scalar.projection

C<< function sys.std.Core.Scalar.projection (Tuple <-- $topic : Scalar,
$possrep? : Name, $attr_names : set_of.Name) >>

This function results in the C<Tuple> that is the projection of the
possrep (whose name is given in the C<possrep> argument) of its C<topic>
argument that has just the subset of attributes of C<topic> which are named
in its C<attr_names> argument.  As a trivial case, this function's result
is the entire named possrep of C<topic> if C<attr_names> lists all
attributes of that possrep; or, it is the nullary tuple if C<attr_names> is
empty.  This function will fail if C<possrep> specifies a possrep name that
C<topic> doesn't have or C<attr_names> specifies any attribute names that
C<topic> doesn't have.  Note that this operation is also known as C<${}>.

=head2 sys.std.Core.Scalar.cmpl_proj

C<< function sys.std.Core.Scalar.cmpl_proj (Tuple <--
$topic : Scalar, $possrep? : Name, $attr_names : set_of.Name) >>

This function is the same as C<projection> but that it results in the
complementary subset of possrep attributes of C<topic> when given the same
arguments.  Note that this operation is also known as C<${!}>.

=head2 sys.std.Core.Scalar.Tuple_from_Scalar

C<< function sys.std.Core.Scalar.Tuple_from_Scalar (Tuple <--
$topic : Scalar, $possrep? : Name) >>

This function results in the C<Tuple> that has all the same attributes of
the possrep of C<topic> whose name is given in C<possrep>; in other words,
the function results in the externalization of one of a scalar value's
possreps.  This function will fail if C<possrep> specifies a possrep name
that C<topic> doesn't have.

=head2 sys.std.Core.Scalar.Scalar_from_Tuple

C<< function sys.std.Core.Scalar.Scalar_from_Tuple (Scalar <--
$topic : Tuple, $type : TypeRef, $possrep? : Name) >>

This function results in the C<Scalar> value whose scalar root
[|sub]type is named by C<type>, which has a possrep whose name matches
C<possrep>, and whose complete set of attributes of that named possrep
match the attributes of C<topic>.  This function can be used to select any
scalar value at all that has a possrep.

=head2 sys.std.Core.Scalar.order

C<< function sys.std.Core.Scalar.order (Order <-- $topic : Scalar,
$other : Scalar, $misc_args? : Tuple, $is_reverse_order? : Bool) >>

This C<order-determination> function is the externalization of a scalar
root type's type-default (total) C<order-determination> function.  This
function results in C<Order:same> iff its C<topic> and C<other> arguments
are exactly the same value, and otherwise it results in C<Order:increase>
if the value of the C<other> argument is considered to be an increase (as
defined by the type) over the value of the C<topic> argument, and otherwise
it results in C<Order:decrease> as the reverse of the last condition would
be true.  This function will fail if its C<topic> and C<other> arguments
are not values of a common scalar root type that declares a type-default
C<order-determination> function; this function will otherwise warn if the
declared types of those arguments are not both subtypes of such a common
scalar root type.  Note that C<order-determination> functions are
considered the only fundamental order-sensitive operators, and all others
are defined over them.  This function also has a C<Tuple>-typed third
parameter, named C<misc_args>, which carries optional customization details
for the order-determination algorithm; this permits the function to
implement a choice between multiple (typically similar) ordering algorithms
rather than just one, which reduces the number of functions needed for
supporting that choice; if the algorithm is not customizable, then a
tuple argument would be of degree zero.  This function also has a
C<Bool>-typed fourth parameter, named C<is_reverse_order>; a C<Bool:false>
argument means the function's algorithm operates as normal when given any
particular 3 other arguments (meaning a sorting operation based on it will
place elements in ascending order), while a C<Bool:true> argument means the
function's algorithm operates in reverse, so the function results in the
reverse C<Order> value it would have otherwise when given the same 3 other
arguments (meaning a sorting operation based on it will place elements in
descending order).  The C<misc_args> and C<is_reverse_order> parameters are
optional and default to the zero-attribute tuple and C<Bool:false>,
respectively, if no explicit arguments are given to them.

=head2 sys.std.Core.Scalar.has_possrep

C<< function sys.std.Core.Scalar.has_possrep (Bool <-- $topic : Scalar,
$possrep? : Name) >>

This function results in C<Bool:true> iff its C<topic> argument has a
possrep whose name is given by C<possrep>; otherwise it results in
C<Bool:false>.

=head2 sys.std.Core.Scalar.possrep_names

C<< function sys.std.Core.Scalar.possrep_names (set_of.Name <--
$topic : Scalar) >>

This function results in the set of the names of the possreps of its
argument.

=head2 sys.std.Core.Scalar.degree

C<< function sys.std.Core.Scalar.degree (NNInt <-- $topic : Scalar,
$possrep? : Name) >>

This function results in the degree of its C<topic> argument's possrep
whose name is given by C<possrep> (that is, the count of attributes the
possrep has).

=head2 sys.std.Core.Scalar.has_attrs

C<< function sys.std.Core.Scalar.has_attrs (Bool <-- $topic : Scalar,
$possrep? : Name, $attr_names : set_of.Name) >>

This function results in C<Bool:true> iff, for every one of the attribute
names specified by its C<attr_names> argument, its C<topic> argument's
possrep whose name is given by C<possrep> has an attribute with that name;
otherwise it results in C<Bool:false>.  As a trivial case, this function's
result is C<Bool:true> if C<attr_names> is empty.

=head2 sys.std.Core.Scalar.attr_names

C<< function sys.std.Core.Scalar.attr_names (set_of.Name <--
$topic : Scalar, $possrep? : Name) >>

This function results in the set of the names of the attributes of its
C<topic> argument's possrep whose name is given by C<possrep>.

=head1 SYSTEM-DEFINED GENERIC CONTROL FLOW FUNCTIONS

=head2 sys.std.Core.Control.func_invo

C<< function sys.std.Core.Control.func_invo (Universal <--
$function : FuncRef, $args? : Tuple) >>

This function results in the result of invoking the other function named in
its C<function> argument with arguments supplied by this function's C<args>
argument; each attribute name of C<args> is mapped to a parameter name of
the invoked function, and the corresponding attribute value is the
corresponding argument for the function invocation.  This function will
fail if the invoked function has any non-optional parameters such that
there aren't any corresponding attributes in C<args>, or if there are any
attributes in C<args> that don't have corresponding parameters, or if any
attribute values aren't of the declared types of the corresponding
parameters.  The purpose of C<func_invo> is to support invocation of any
function whose name or parameters potentially aren't known until runtime;
it forms the foundation of all other system-defined functions that want to
invoke a function whose name they take as an argument.  The C<args>
parameter is optional and defaults to the zero-attribute tuple if no
explicit argument is given to it.

=head2 sys.std.Core.Control.curried_func

C<< function sys.std.Core.Control.curried_func (FuncRef <--
$function : FuncRef, $args : Tuple) >>

This function results in a reference to a new anonymous function which is
the result of currying the other function named in its C<function> argument
with 0..N arguments supplied by this function's C<args> argument; each
attribute name of C<args> is mapped to a parameter name of the curried
function, and the corresponding attribute value is the corresponding
pre-bound parameter of the curried function.  This function will fail if
there are any attributes in C<args> that don't have corresponding
parameters, or if any attribute values aren't of the declared types of the
corresponding parameters.  A curried function effectively does not have the
parameters of the original function that were pre-bound, and attempts to
supply arguments to those on the curried function will fail.  Note that the
result of a C<curried_func> invocation can be used as input to another one,
as there is effectively no difference in their kind.  The purpose of
C<curried_func> is to support the passing of functions as arguments to
invocations of other routines where the passed function wants to use
runtime-defined information in the context that invoked routine, without
having to pass that information separately as additional routine arguments.
Or the purpose of C<curried_func> is just to easily support defining
functions as simplified versions of others.

=head1 SYSTEM-DEFINED GENERIC UNIVERSAL UPDATERS

These update operators are applicable to values of any data type at all.

=head2 sys.std.Core.Universal.assign

C<updater sys.std.Core.Universal.assign (&$target : Universal,
$v : Universal)>

This update operator will update the variable supplied as its C<target>
argument so that it holds the value supplied as its C<v> argument.  This
updater will fail if C<v> isn't of the declared type of the variable behind
C<target>; this function will otherwise warn if the declared type of C<v>
isn't a subtype of the declared type of the variable behind C<target>.

=head1 SYSTEM-DEFINED GENERIC CONTROL FLOW UPDATERS

=head2 sys.std.Core.Control.upd_invo

C<updater sys.std.Core.Control.upd_invo ($updater : UpdRef,
&$upd_args : Tuple, $ro_args? : Tuple)>

This update operator has the same purpose and features as
C<sys.std.Core.Control.func_invo> but that it invokes an updater rather
than a function; there is no result to deal with, and there are both
subject-to-update parameters and read-only parameters of the invoked
updater to bind to; they are bound with the attributes of this updater's
C<upd_args> and C<ro_args> arguments, respectively.  The C<ro_args>
parameter is optional and defaults as per the C<args> parameter of
C<func_invo>; the C<upd_args> parameter is non-optional because an updater
must always be invoked with at least one subject-to-update argument.

=head1 SYSTEM-DEFINED GENERIC SYSTEM SERVICES FOR STANDARD I/O

These system services are provided so Muldis D can do basic user
input/output by itself, using standard input and standard output, like any
general purpose programming language, and help satisfy its need to be
computationally complete.  For now they just work with plain (Unicode) text
data, so one can implement a basic command-line program interface, or do
basic invoker-setup file piping, as well as display diagnostics to standard
error.  These routines are not exhaustive, and their details are subject to
future revision.

=head2 sys.std.Core.STDIO.read_Text

C<system-service sys.std.Core.STDIO.read_Text (&$target : Text,
$len_in_graphs : NNInt)>

This system service routine will attempt to read C<len_in_graphs>
characters from standard input as a single C<Text> value, blocking the
current in-DBMS process until it finishes, and then update the variable
supplied as its C<target> argument so that it holds the read value.  The
routine will only fetch fewer than the requested number of characters if
the input stream is closed first.  This routine will throw an exception if
any system errors occur.

=head2 sys.std.Core.STDIO.read_Text_line

C<system-service sys.std.Core.STDIO.read_Text_line (&$target : Text,
$ignore_empty_lines? : Bool)>

This system service routine is the same as C<sys.std.Core.STDIO.read_Text>
except that it will read from standard input until an
implementation-defined end-of-line character is read, rather than reading a
fixed number of characters; this end-of-line character will not be included
in the read C<Text> value.  If the C<ignore_empty_lines> argument is
C<Bool:true>, then this routine will keep reading lines from standard input
until it reads a non-empty line, and then C<target> is only updated to hold
that last non-empty line; otherwise, this routine will end as soon as one
line is read, even if it is empty.

=head2 sys.std.Core.STDIO.write_Text

C<system-service sys.std.Core.STDIO.write_Text ($v : Text)>

This system service routine will attempt to write the characters of its
C<v> argument to standard output, blocking the current in-DBMS process
until it finishes.  This routine will throw an exception if any system
errors occur.

=head2 sys.std.Core.STDIO.write_Text_line

C<system-service sys.std.Core.STDIO.write_Text_line ($v : Text)>

This system service routine is the same as C<sys.std.Core.STDIO.write_Text>
except that it will additionally write an implementation-defined
end-of-line character after writing C<v>.

=head2 sys.std.Core.STDIO.prompt_Text_line

C<system-service sys.std.Core.STDIO.prompt_Text_line (&$target : Text,
$prompt : Text, $ignore_empty_lines? : Bool )>

This system service routine is a wrapper over first invoking
C<sys.std.Core.STDIO.write_Text> with its C<prompt> argument and then
invoking C<sys.std.Core.STDIO.read_Text_line> with its C<target> argument.
A true C<ignore_empty_lines> argument will result in I<both> of the wrapped
routines being invoked repeatedly, not just C<read_text_line>.

=head2 sys.std.Core.STDIO.error_Text

C<system-service sys.std.Core.STDIO.error_Text ($v : Text)>

This system service routine is the same as C<sys.std.Core.STDIO.write_Text>
except that it will write to standard error rather than standard output.

=head2 sys.std.Core.STDIO.error_Text_line

C<system-service sys.std.Core.STDIO.error_Text_line ($v : Text)>

This system service routine is the same as
C<sys.std.Core.STDIO.write_Text_line> except that it will write to standard
error rather than standard output.

=head1 SYSTEM-DEFINED GENERIC CONTROL FLOW PROCEDURES

These procedures are applicable to use in all kinds of procedures.

=head2 sys.std.Core.Control.proc_invo

C<procedure sys.std.Core.Control.proc_invo ($procedure : ProcRef,
&$upd_args? : Tuple, $ro_args? : Tuple)>

This procedure is the same as C<sys.std.Core.Control.upd_invo> but that it
invokes a procedure (or system-service) rather than an updater, and
that C<upd_args> is optional.

=head2 sys.std.Core.Control.fail

C<procedure sys.std.Core.Control.fail ($topic : Exception)>

This procedure will throw the exception given as its argument; this results
in the call stack unwinding, and transaction rollbacks, until it is caught.

=head2 sys.std.Core.Control.try_catch

C<procedure sys.std.Core.Control.try_catch
($try : ProcRef, &$try_upd_args? : Tuple, $try_ro_args? : Tuple,
$catch? : ProcRef, &$catch_upd_args? : Tuple, $catch_ro_args? : Tuple)>

This procedure invokes the procedure (or system-service)
named in its C<try> argument
with arguments supplied by this procedure's C<try_upd_args> and
C<try_ro_args> arguments; each attribute name of C<try_[upd|ro]_args> is
mapped to a parameter name of the invoked procedure, and the corresponding
attribute value is the corresponding argument for the procedure
invocation.  If the C<try> routine
throws an exception, then any state changes it made roll back (but changes
made before that don't), and the call stack unwinds to the C<try_catch>
itself; then the procedure named by C<catch> is invoked similarly
to C<try> was, with corresponding arguments, but with the extra read-only
argument C<topic> whose value is an C<Exception>; if the C<catch> routine
also throws an exception (such as to say its not handling the thrown one),
then that one is not caught and the call stack unwinding plus applicable
transaction rollback carries on to the caller of the C<try_catch>.  If the
C<try> routine succeeds (doesn't throw an exception), then the C<catch>
routine is not called.  Each of the C<[try|catch]_[upd|ro]_args>
parameters is optional and defaults to the zero-attribute tuple if no
explicit argument is given to it.

=head1 SEE ALSO

Go to L<Muldis::D> for the majority of distribution-internal
references, and L<Muldis::D::SeeAlso> for the majority of
distribution-external references.

=head1 AUTHOR

Darren Duncan (C<darren@DarrenDuncan.net>)

=head1 LICENSE AND COPYRIGHT

This file is part of the formal specification of the Muldis D language.

Muldis D is Copyright Â© 2002-2009, Muldis Data Systems, Inc.

See the LICENSE AND COPYRIGHT of L<Muldis::D> for details.

=head1 TRADEMARK POLICY

The TRADEMARK POLICY in L<Muldis::D> applies to this file too.

=head1 ACKNOWLEDGEMENTS

The ACKNOWLEDGEMENTS in L<Muldis::D> apply to this file too.

=cut
